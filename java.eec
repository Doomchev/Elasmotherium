comma=, 
plus= + 
newl=\n\i
newlcomma=,\n\i

*:\c()
root:\c(newl)

code:{\+\n\i\c(newl:line)\-\n\i}

object:{\+\n\i\c(newlcomma)\-\n\i}
entry:\0 = \1
function:\?public[public ]\?static[static ]\!constructor[\(type:name) ]\x(\c(comma:parameter)) \(code)
function_name:\x
function_call:\x
constructor:\x(\c(comma:parameter)) \(code)
class:public class \x {\+\n\i\c(newl:field)\-\n\i}
class_name:\x
class_call:new \x
link:\?this[this.]\?definition[\(type:name) ]\x\?get[()]
link_call:\?this[this.]\(value:call)
call:\(function:call)(\c(comma))
call_line:\(function:call)(\c(comma));
this:this
name:\x
variable:\?this[this.]\x
variable_field:\?static[static ]\(type:name) \x\?get[() \?value[{\n\+\ireturn \(value);\n\-\i}]\?code[\(code)]]\!get[\?value[ = \(value)]];
variable_parameter:\?type[\(type:name) ]\x

if:if(\(condition)) \(code)\?else[ else \(else)]
condition:\c()

for:for(\(init); \(condition); \(iteration)) \(code)
for_each:for(\(index) = 0; \(index) < \(collection).size; \(index)++) \(code)

do:while(true) \(code)

return:return \0;
return_null:return;
break:break
end:System.exit(0);

integer:\x
decimal:\x
type:\x\?subtype[<\c(comma)>]
type_name:\x\?subtype[<\c(comma)>]
subtype:\x\?subtype[<\c(comma)>]

stringSequence:\c(plus)
string:"\x"

array:new Object[]{\c(comma)}

equate:\?type[\(type) ]\0 = \1;
add:\0 += \1;
subtract:\0 -= \1;
multiply:\0 *= \1;
divide:\0 /= \1;
increment: \0++;
decrement: \0--;

dot:\0.\1
atIndex:\0[\1]
brackets:(\0)

addition:\0 + \1
subtraction:\0 - \1
multiplication:\0 * \1
division:\0 / \1
mod:\0 % \1
bitAnd:\0 & \1
bitOr:\0 | \1
equal:\0 == \1
notequal:\0 != \1
less:\0 < \1
lessOrEqual:\0 <= \1
more:\0 > \1
moreOrEqual:\0 >= \1
and:\0 && \1
or:\0 || \1
ifOp:\0 ? \1 : \2
