comma=, 
plus= + 
end=;\n\i
codeBlock=

*:\c(*)
root:\c(*,end);

directive:

code_main:\c(*,end);
code:{\+\n\i\c(*,end);\-\n\i}
code_then:{\+\n\i\c(*,end);\-\n\i}
code_else:{\+\n\i\c(*,end);\-\n\i}
code_each:\c(*,end);\-\n\i}

function:function \x(\c(parameter,comma)) \(code)
functionCall:\(variable)(\(parameters))
parameters:\c(*,comma)
parameter:\x

if:if(\(condition)) \(code_then)
if_else:if(\(condition)) \(code_then) else \(code_else)
condition:\c(*)

for:for(\(init); \(condition); \(iteration)) \(code)
for_each:for(\(index) = 0; \(index) < \(object).size; \(index)++) {\+\n\i\(item) = \(object)[\(index)];\n\i\(code_each)
for_each_index:for(\(index) = 0; \(index) < \(object).size; \(index)++) \(code)

do:do \(code)

return:return \0
break:break
end:end

variable:\x
integer:\x
decimal:\x

stringSequence:\c(*,plus)
string:"\x"

array:[\c(value,comma)]
equate:\0 = \1
add:\0 += \1
subtract:\0 -= \1
multiply:\0 *= \1
divide:\0 /= \1
increment: \0++
decrement: \0--

dot:\0.\1
atIndex:\0[\1]

adddition:\0 + \1
subtraction:\0 - \1
multiplication:\0 * \1
division:\0 / \1
mod:\0 % \1
bitAnd:\0 & \1
bitOr:\0 | \1
equal:\0 == \1
notequal:\0 != \1
less:\0 < \1
lessOrEqual:\0 <= \1
more:\0 > \1
moreOrEqual:\0 >= \1
and:\0 && \1
or:\0 || \1
ifOp:\0 ? \1 : \2