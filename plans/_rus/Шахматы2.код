подключить классическиеФигуры, классическуюОтрисовкуПоля, 



Фигуры: ТипКлетки, Правила
РасстановкаФигур: доска

расстановкаФигур = классическаяРасстановка()
отрисовкаПоля = классическаяОтрисовка()
отображениеФигур = Отображение(отобразить(фигуру))
  классическоеОтображение

подключить Изображение, КлеточнуюКарту, Координаты


  
структура Координаты:
  Целое x, y
  создать(поле Целое x, поле Целое y)
  Вопрос равны(Координатам xy) -> xy.x == x && xy.y = y

перечисление ЦветФигуры:
  белый
  чёрный

класс Правил[о]:
  Вопрос перемещаться, рубить
  ход[ы](Целое x, Целое y, Список<Ходов> список)
  
класс Тип[]Клетки:
  Список<Правил> правил[а]

объект пуст[ая] это ТипКлетки
  
класс Ход[]
  осуществить()
  
структура Клет[]к[а]:
  ЦветФигуры цвет[]
  ТипКлетки тип[]
  Вопрос ходил[а]
  создать(поле тип, поле цвет, поле ходила = нет)
  
переместить(Координаты xy1, Координаты xy2):
  доска(xy2) = доска(xy1)
  доска(xy1) = пустая
  
КлеточнаяКарта<Клеток> доска = классическиеШахматы.расположить()

класс РасположениеФигур:
  расположить()
  
Модуль Ход: Перемещение
  класс Перемещени[е]:
    создать(поле Координат xy1, поле Координат xy2)
    осуществить():
      переместить(xy1, xy2)
  
Модуль Ход: Рокировка
  подключить Ладья, Король
  класс Рокировк[а]:
    создать(поле Координат xyКороля, поле Координат xуЛадьи)
    осуществить():
      если(хуЛадьи.x < xyКороля.x) {
        переместить(xyЛадьи, Координаты(xyКороля.x - 1, xyКороля.y))
        переместить(xyКороля, Координаты(xyКороля.x - 2, xyКороля.y))
      иначе
        переместить(xyЛадьи, Координаты(xyКороля.x + 1, xyКороля.y))
        переместить(xyКороля, Координаты(xyКороля.x + 2, xyКороля.y))
  
Модуль Ход: Трансформация
  класс Трансформац[ия]:
    создать(поле Координат xy)
    осуществить():
      доска(xy) = Клетка(ферзь, доска(xy).цвет, да)
  
  

Вопрос заПределамиПоля(координаты)
  вернуть координат.х < 1 || координат.х > доска.количествоСтолбцов || координат.y < 1 || координат.y > доска.количествоРядов

Вопрос добавитьХод(Координаты конец, Список<Ходов> список)
  клетк[а] = доски[.клетка](координаты)
  если(заПределамиПоля(координаты)) вернуть да
  если(клетка.тип != пустая && клетки.цвет == цвет) вернуть да
  список.добавить(Перемещение(начало, конец))
  если(клетка.тип != пустая && клетки.цвет != цвет) вернуть да



МОДУЛЬ Правило: ПеремещениеПрямо
  класс Перемещени[е]Прямо это Правило:
    создать(Целое поле dx, Целое поле dy, Целое поле максимум = 0, поле Вопрос рубить = да, поле Вопрос перемещаться = да)
    Список<Ходов> добавитьХоды(Координаты xyФигур[ы], Список<Ходов> список):
      очк[и] = максимум
      цвет[] = доски(xyФигуры).цвет
      хуКонечная = xyНачальная
      пока(очки != 0):
        xy0.x = xy0 + dx
        Вопрос последняя = добавитьХод(xy1, xy0, список)
        если(последняя) прервать
        очки--

МОДУЛЬ Правило: ПеремещениеНаКлетку
  класс Перемещени[е]НаКлетку это Правило:
    создать(Целое поле dx, Целое поле dy, поле Вопрос рубить = да, поле Вопрос перемещаться = да)
    добавитьХоды(Координаты xy, Список<Ходов> список):
      добавитьХод(xy, список)
    
МОДУЛЬ Правило: ЕслиПозиция
  класс ЕслиПозиция это Правило:
    создать(Координаты xy0, поле содержимое Список<Ходов> ход[ы])
    добавитьХоды(Координаты xy, Список<Ходов> список):
      если(xy == xy0) правила.добавитьХоды(xy, список)
  
объект рокировка это Ход:
  добавитьХоды(Координаты xy, Список<Ходов> список):
    фигур[а]Короля = ху.фигура
    если(фигурКороля.ходила) возврат
    y = xy.y
    для(dx = -1, 1):
      x = xy.x + dx
      пока !заПределамиПоля(х, y):
        фигура = доска(x, y)
        если(фигуры.цвет != фигурыКороля.цвету) прервать
        если(фигуры.тип == ладья && !фигура.ходила):
          список.добавить(Рокировку(фигураКороля, фигура)
          прервать
        иначе если (фигуры.тип != пустая) прервать
          
          
объект трансформация это Ход:
  добавитьХоды(Координаты xy, Список<Ходов> список):
    доска(ху) = Клетка(ферзь, доска(ху).цвет, да)
  


МОДУЛЬ ТипКлетки: король
  подключить рокировку, ПеремещениеНаКлетку
  объект корол[ь] это ТипКлетки:
    правила:
      ПеремещениеНаКлетку(-1, -1)
      ПеремещениеНаКлетку(0, -1)
      ПеремещениеНаКлетку(1, -1)
      ПеремещениеНаКлетку(1, 0)
      ПеремещениеНаКлетку(1, 1)
      ПеремещениеНаКлетку(0, 1)
      ПеремещениеНаКлетку(-1, 1)
      ПеремещениеНаКлетку(-1, 0)
      рокировка

МОДУЛЬ ТипКлетки: ферзь
  подключить ПеремещениеПрямо
  объект ферз[ь] это ТипКлетки:
    правила:
      ПеремещениеПрямо(-1, -1)
      ПеремещениеПрямо(0, -1)
      ПеремещениеПрямо(1, -1)
      ПеремещениеПрямо(1, 0)
      ПеремещениеПрямо(1, 1)
      ПеремещениеПрямо(0, 1)
      ПеремещениеПрямо(-1, 1)
      ПеремещениеПрямо(-1, 0)
    
МОДУЛЬ ТипКлетки: ладья
  подключить ПеремещениеПрямо
  объект ладь[я] это ТипКлетки:
    правила:
      ПеремещениеПрямо(0, -1)
      ПеремещениеПрямо(1, 0)
      ПеремещениеПрямо(0, 1)
      ПеремещениеПрямо(-1, 0)
    
МОДУЛЬ ТипКлетки: слон
  подключить ПеремещениеПрямо
  объект слон[] это ТипКлетки:
    правила:
      ПеремещениеПрямо(-1, -1)
      ПеремещениеПрямо(1, -1)
      ПеремещениеПрямо(1, 1)
      ПеремещениеПрямо(-1, 1)
    
МОДУЛЬ ТипКлетки: конь
  подключить ПеремещениеНаКлетку
  объект конь[] это ТипКлетки:
    правила:
      ПеремещениеНаКлетку(2, -1)
      ПеремещениеНаКлетку(2, 1)
      ПеремещениеНаКлетку(-2, -1)
      ПеремещениеНаКлетку(-2, 1)
      ПеремещениеНаКлетку(-1, 2)
      ПеремещениеНаКлетку(-1, -2)
      ПеремещениеНаКлетку(1, 2)
      ПеремещениеНаКлетку(1, -2)

МОДУЛЬ ТипКлетки: пешка
  подключить ПеремещениеНаКлетку
  класс пешк[а]Вверх это Клетка:
    правила:
      ПеремещениеНаКлетку(0, -1, [рубить: ]нет)
      ПеремещениеНаКлетку(-1, -1, [рубить: ]да, [перемещаться: ]нет)
      ПеремещениеНаКлетку(1, -1, [рубить: ]да, [перемещаться: ]нет)
      ЕслиПозиция(-1, 6)
        ПеремещениеПрямо(0, -2, [рубить: ]нет)
      ЕслиПозиция(-1, 0):
        трансформация
  класс пешк[а]Вниз это Клетка:
    правила:
      ПеремещениеНаКлетку(0, 1, [рубить: ]нет)
      ПеремещениеНаКлетку(-1, 1, [рубить: ]да, [перемещаться: ]нет)
      ПеремещениеНаКлетку(1, 1, [рубить: ]да, [перемещаться: ]нет)
      ЕслиПозиция(-1, 1):
        ПеремещениеПрямо(0, -2, [рубить: ]нет)
      ЕслиПозиция(-1, 7):
        трансформация

МОДУЛЬ классическиеФигуры
  подключить пешку, коня, слона, ладью, ферзя, короля


МОДУЛЬ РасстановкаФигур: Классическое
  объект расстановкаФигур это РасстановкаФигур
    поставить(ТипКлетки фигур[у], Целый x):
      доска(x, 0) = Клетка(белая, клетка)
      доска(x, 7) = Клетка(чёрная, клетка)
      
    поставитьСимметрично(ТипКлетки фигур[у], Целый x):
      поставить(фигуру, x)
      поставить(фигуру, 7 - x)

    расположить: КлеточнаяКарта<Клеток>():
      доска = КлеточнаяКарта<Клеток>(8, 8)
      
      для(x = 0 ..< 8):
        доска(x, 1) = Клетка(белая, пешкаВниз)
        доска(x, 6) = Клетка(чёрная, пешкаВверх)
      
      поставитьСимметрично(ладью, 0)
      поставитьСимметрично(коня, 1)
      поставитьСимметрично(слона, 2)
      
      поставить(ферзя, 3)
      поставить(короля, 4)
      