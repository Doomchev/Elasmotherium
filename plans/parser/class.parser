codeLineStartToken("class"): class() MOVE(class, code) RETURN

class: id() CREATE(class) {
  "<": >> classParameter
  other: classExtends
}

classParameter: id() CREATE(type) MOVE(type, class) {
  ",": >> classParameter
  ">": >> classExtends
  other: syntaxError
}

classExtends: {
  letter: id() SWITCHID {
    "extends": id() CREATE(link) MOVE(link, class) classBracket
    other: syntaxError
  }
  other: classBracket
}

classBracket: {
  "{": >> classBody
  ";": >> RETURN
  other: syntaxError
}

classBody: {
  // Type var
  // Type function
  // method(
  letter: id() SWITCHID {
    // this(
    "this": EXPECT("(") CREATE(constructor) methodParameter
    other: {
      letter: CREATE(type) id() {
        // Type var,
        // Type var;
        // Type var = value
        ",;=": classFieldValue
        // Type method(
        "(": >> CREATE(function) MOVE(type, function) methodParameter
        other: syntaxError
      }
      // Type0<Type1> var
			// Type0<Type1> method
      "<": >> type() id() {
				"(": >> CREATE(function) methodParameter
				other: classFieldValue
			}
      // method(
      "(": >> CREATE(function) methodParameter
      other: syntaxError
    }
  }
  "}": >> RETURN
  other: syntaxError
}

classFieldValue: CREATE(variable) {
  // Type field = value
  "=": >> formula() MOVE(formula, variable) classFieldEnd
  other: classFieldEnd
}

classFieldEnd: {
  // Type field,
  ",": >> DUP(type) MOVE(type, variable) id() classFieldValue
  // Type field;
  ";": >> classBody
  other: syntaxError
}

methodParameter: {
  // method(Type var
  // method(this.var
  letter: id() {
    // method(this.var
    ".": >> SWITCHID {
      "this": id() CREATE(thisvar) methodParamDefault
      other: syntaxError
    }
    // method(Type var
    letter: CREATE(type) id() CREATE(variable) MOVE(type, variable) methodParamDefault
    // method(Type<Type> var
    "<": >> type() id() CREATE(variable) MOVE(type, variable) methodParamDefault
    // method(var = formula
    "=": expected("Type")
    // method(var,
    // method(var)
    ",)": expected("Type for parameter")
    other: expected("Identifier or subtype")
  }
  // Type method()
  ")": >> methodCode
  other: expected("Identifier or )")
}

methodParamDefault: {
  // Type[<Type>] var = default
  "=": >> formula() MOVE(formula, variable) methodParamEnd
  // Type[<Type>] var
  other: methodParamEnd
}

methodParamEnd: MOVE(variable, function) {
  // method(params, 
  ",": >> methodParameter
  // method(params)
  ")": >> methodCode
  other: expected(", or )")
}

methodCode: {
  // [Type ]method([params]) -> expression;
  "-": >> EXPECT(">") formula() CREATE(return) MOVE(formula, call) CREATE(code) MOVE(call, code) MOVE(code, function) EXPECT(";") methodEnd
  // [Type ]method([params]) codeLine;
  ";": >> methodEnd
  other: code() MOVE(code, function) methodEnd
}

methodEnd: MOVE(function, class) classBody