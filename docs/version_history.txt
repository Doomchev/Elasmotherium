2021.08.25 (version 0.24.1)
  + Attaching vm commands to existing functions instead of creating new.
  + Base.es import by default.
  + ShowCommands parameter for VM code execution.
  * Fixed module import system.

2021.08.24 (version 0.24)
  + P: Constructor this value processing.
  + P: Convert, getField commands.
  + P: TypeFunction - processor command to add vm command depending on type.
  + P: Object parameter and setObject command.
  + VM: ThisFieldEquate, ThisFieldIncrement, ThisFieldPush
  * P: Parent parameter is renamed to param.
  * VM: Parent class for field commands.
  - P: Automatic conversion system.
  - P: Return type for processor functions.
  - P: GetFromScope, ResolveAll, Switch commands;
  - VM: NewMethodCall, NewThis, ReturnThis

2021.08.16 (version 0.23)
  + P: Return type for processor functions, new type conversion system.
  * P: Function call parameter changed to ClassEntity and renamed to targetClass.
  * VM: Fixed function call system.
  - P: Convert command.

2021.08.16 (version 0.22)
  + P: Class and ID as function call parameters.
  + P: Labels system.
  + P: Stop and Process processor command.
  + Debug log sections highlighing.
  * AST: Function call now has separate function and functionID fields.
  * VM: Allocated stack values are now undefined.
  * VM: Changed command link system to indexed system.

2021.08.10 (version 0.21)
	+ P: Scope stack system.
  + AST: Sections of Entity and subclasses separated by comments.
  + P: AppendCommand, Call, GetFromScope, ResolveAll, Switch, Convert processor commands.
  + P: CallParameter, Parent, This, VariableValue processor parameters.
  * New file reading system.
  * PE: Values and their methods are disjointed from Entity and moved to VM package.
  - AST: ID constants.

2021.08.05 (version 0.20)
	* PE: Variable, field and parameter indexation system.
	
2021.08.02 (version 0.19.2)
	* PE: Commands creating system.
	
2021.07.26 (version 0.19.1)
	+ PE: Hardcoded basic functions priority.
	* PE: Formula resolving is restored.

2021.07.20 (version 0.19)
  + PE: multiple symbols in symbolswitch token.
  + PE: multiple tokens for symbolswitch.
  + PE: default symbolswitch entries.
  * Error handling system.
  * PE: spaces in error messages.
  * PE: spaces inside brackets.
  * PE: : and + in tokens.
  * PC: done refactoring.
  * Restructurized file / directory system.
  - Export system.
  - Old links resolving system.
  - Old bytecode generation system.

2020.10.24 (version 0.18)
  + LLCG: Class methods, increment.
  + VM: I64Increment, I64ThisIncrement, VMNewMethodCall commands.
  + AST: Function parameter's link to function.
  * AST: Printing.

2020.10.17 (version 0.17.1)
  + AST: Function list of code object.
  + AST: Cascading variables lists.
  - AST: Scopes.
  - AST: Flags list and FlagEntity class.

2020.10.11 (version 0.17)
  + LLCG: Constructors.
  * AST: Rewrote equation byte code generation mechanism.
  * VM: Changed command execution mechanism.
  * Replaced error function execution with throwing exceptions.

2020.09.28 (version 0.16)
  + LLCG: New objects.
  + VM: Object entity, new object command.
  + VM: Field setting and retrieving commands.
  * AST: Equation system.

2020.09.28 (version 0.15.1)
  * AST: Converted anonymous classes of native functions to standalone classes.
  * AST: Moved "parser.structure" package to "ast" package.

2020.09.14 (version 0.15)
  * VM: Converted several type stack pointers to one stack pointer.
  
2020.09.14 (version 0.14)
  + LLCG: if ternary operator, function calling
  + VM: FunctionCall object
  + VM: Commands: I64Deallocate, I64StackPush, Call, NewFunctionCall, I64StackMoveReturnValue, Return

2020.09.09 (version 0.13)
  + AST: Numeric value types (I8, I16, I32, I64, F32, F64)
  + AST: Function call return type and covertTo type
  + Low-level code generation (LLCG):
  + LLCG: do block, if block, main function, string sequence
  + LLCG: Type conversion
  + LLCG: Variable indexation and allocation quantity counting
  + Virtual machine (VM) for low-level code with stacks, command adding function and goto linking support
  + VM: Commands: I64Allocate, I64Push, I64Equate, I64StackPush, I64Add, StringPush, I64ToString, StringAdd, VMPrint, VMEnd
      , VMRandom, VMInput, StringToI64, I64Less, IfFalseGoto, VMShowMessage, VMGoto, I64More
  * LLCG: Native functions type inference
  * AST: Converted scope entries hash map to list of entries
  - Type inference

2019.07.25 (version 0.12)
  + PE: import keyword, modules and java binding support
  + EE: user functions
  * EE, JEC: proper use of semicolons

2019.06.17 (version 0.11)
  + EE: postfixes for entity child and children
  + ID system (instead of strings)
  * PE: new stack-based parser
  * PE: new abstract syntax tree structure
  * PC: new parsing language
  * SPE: new syntax tree processing engine
  * TEE: new type inference engine
  * New file extensions
  
2019.03.25 (version 0.10)
  + PC: abstract methods
  + PC: native classes and functions (will be skipped during export)
  + SPE: generic subtypes
  * SPE: native class replacement
  * PC: generic subtypes
  
2019.03.13 (version 0.9)
  + PC: generic subtypes
  + PC, SPE, JEC: getters
  + PC: // and /* */ comments
  + PC: "extends" keyword
  * Separate classes for field structure, function scope and class scope

2019.02.13 (version 0.8)
  + Type inference engine (TEE)
  + Structure processing engine (SPE)
  + Java export code (JEC)
  + PC: "global" keyword

2019.01.05 (version 0.7)
  + PE: parser code lines in error messages and parsing log
  + PC: field and variable types
  + PC: $ prefix
  * PE, EE: error messages
  * PE: parsing logging
  ! PE: node resolving

2018.12.02 (version 0.6)
  + PE: INCLUDE command
  
2018.11.24 (version 0.5)
  + PE: ADD command
  + PC: value returns string if there is only one string in string sequence
  + PC: default values and this in function definition parameters
  + PC, JSEC: classes, objects, methods, constructors
  + PC, JSEC: anonymous functions
  + PC, JSEC: return
  ! PE: // comments
  
2018.11.23 (version 0.4)
  + PE, EE: // comments
  + PC: multiple loops in one for operator
  + JSEC: for loops
  * EE, JSEC: new format of tokens (as escape sequences)

2018.11.22 (version 0.3)
  + PE: expression parser (shutting-yard algorithm with ternary conditional operator)
  + PC: ranges in for loop
  + JSEC: other numeric and boolean operators
  + JSEC: if-then-else clause
  * PC: # changed to \
  ! PC: arrays in expressions
  ! PC: operators
  ! PC: if-then-else clause
  ! JSEC: function calls
  
2018.11.13 (version 0.2)
  * PE, PC: fully rewritten

2018.11.07 (version 0.1)
  + Parsing engine (PE)
  + Parsing code (PC)
  + Abstract syntax tree (AST)
  + Exporting engine (EE)
  + Javascript export code (JSEC)

To do:  
  + abstract get fields, methods and constructors
  + type conversion
  + ranges
  + $[] syntax
  + string slices

Possible improvements:
  + SPE: function unpacking
  + PE: change ActionGoTo actions to straight links
  + PE: faster subs with no return value
  + PE: faster inline subs