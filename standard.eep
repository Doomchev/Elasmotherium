minus = -
quotes = " "
colon = :
digit = 0-9
letter = a-z A-Z _
idSymbol = digit letter
fileSymbol = digit letter .
spacing = tab space
nothing = tab space newline
op = + - * =
closure = ) ] }


ERROR expected: \0 expected
ERROR syntaxError: Syntax error
ERROR invalid: Invalid \0
ERROR error: \0


root: сodeLines(0) CREATE(0,code:\0)

сodeLines: CREATE(0,code) codeLinesBody
codeLinesBody: {
	nothing: >>
	"/": comment()
	eof: RETURN(\0)
	"}": RETURN(\0)
	other: codeLine(1) INSERT(0,\1)
}

code: {
	nothing: >>
	"/": comment()
	"{": >> сodeLines(0) EXPECT("}") RETURN(\0)
	other: CREATE(0,code) codeLine(1) INSERT(0,\1) RETURN(\0)
}

skip: {
	nothing: >>
	other: CLEAR RETURN
}

id: {
  nothing: >>
	"/": comment()
  letter: CLEAR >> {
    idSymbol: >>
    other: STORE(0) RETURN(\0)
  }
  other: CLEAR STORE(0) RETURN(\0)
}

// code line

codeLine: {
  nothing: >>
	"/": comment()
	letter: CLEAR >> {
		idSymbol: >>
		other: STORE(2) SWITCH(2) {
			"for": EXPECT("(") for
			"do": code(2) RETURN(do[code:\2])
			"if": EXPECT("(") value(0) EXPECT(")") code(1) SAVEPOS id(2) SWITCH(2) {
        "else": code(2) RETURN(if_else[condition[\0],code:\1,else:\2])
        other: LOADPOS RETURN(if[condition[\0],code:\1])
      }
      "break": {
        spacing: SKIP
				"/": comment()
        "(": >> number(0) EXPECT(")") RETURN(break[times:\0])
        other: RETURN(break)
      }
      "return": {
				nothing: >>
				"/": comment()
        "(": >> value(0) EXPECT(")") RETURN(return[\0])
        other: RETURN(return_null)
      }
      "end": RETURN(end)
			"global": id(2) {
				letter: id(3) CREATE(0,value[variable:\3[type:\2,global]]) var
        other: CREATE(0,value[variable:\2[global]]) var
			}
			"native": id(2) INSERT(2,native) def
      other: def
		}
	}
	"$": >> id(2) CREATE(0,value[variable:\2[this]]) var
  "[": >> array(1) INSERT(0,\1) {
    nothing: >>
		"/": comment()
    "[": >> index
    ".": >> dot
    other: expected("[_or_.")
  }
	other: syntaxError
}
def: {
	nothing: >>
	"/": comment()
	"(": >> SAVEPOS CREATE(0,value) CREATE(1,function:\2) functionParameter
	"{": >> CREATE(0,class:\2) class
	"<": >> codeSubType
	letter: id(3) SWITCH(3) {
		"extends": id(3) EXPECT("{") CREATE(0,class:\2[extends:\3]) class
		other: CREATE(0,value[variable:\3[type:\2]]) var
	}
	other: CREATE(0,value[variable:\2]) var
}
codeSubType: subtype(3) INSERT(2,\3) {
	nothing: >>
	"/": comment()
	",": >> codeSubType
	">": >> id(3) CREATE(0,value[variable:\3[type:\2]]) {
		nothing: >>
		"/": comment()
		"{": >> CREATE(0,class:\2) class
		other: var
	}
	other: expected(",_or_>")
}

subtype: id(0) {
	nothing: >>
	"/": comment()
	"<": >> subtype(1) INSERT(0,subtype:\1)
	",": RETURN(subtype:\0)
	">": RETURN(subtype:\0)
	other: expected("Comma,_<_or_>")
}

// comments

comment: >> slashComment
slashComment: {
	"/": >> {
		eof: RETURN
		newline: >> RETURN
		other: >>
	}
	"*": >> multiLineComment
	other: expected("*_or_/")
}
multiLineComment: {
	"*": >> {
		"/": >> RETURN
		other: multiLineComment
	}
	other: >>
	eof: expected("*/")
}

// for loop

for: id(0) CREATE(0,variable:\0) {
  nothing: >>
	"/": comment()
  "=": >> value(1) {
    nothing: >>
		"/": comment()
    ";": >> value(2) EXPECT(";") codeLine(3) forSeparator(4) standardFor
    ".": >> EXPECT(".") {
      "<": >> value(2) forSeparator(4) lessRangeFor
			"/": comment()
      other: value(2) forSeparator(4) fullRangeFor
    }
    other: syntaxError
  }
  letter: id(1) SWITCH(1) {
    "at": id(1) CREATE(1,variable:\0) id(2) SWITCH(2) {
      "in": value(2) forSeparator(4) atInFor
      other: expected("in")
    }
    "in": value(1) forSeparator(4) inFor
    "indexin": value(1) forSeparator(4) indexInFor
    "keyin": value(1) forSeparator(4) indexInFor
    other: expected("=,_at,_in_or_indexin")
  }
  other: syntaxError
}

forSeparator: {
  nothing: >>
	"/": comment()
  ")": >> code(0) RETURN(\0)
  ";": >> CREATE(0,code) for(1) INSERT(0,\1) RETURN(\0)
  other: expected(";_or_)")
}
standardFor: RETURN(for[init[equate[\0,\1]],condition:\2,iteration:\3,code:\4])
lessRangeFor: RETURN(for[init[equate[\0,\1]],condition[less[\0,\2]],iteration[increment[\0]],code:\4])
fullRangeFor: RETURN(for[init[equate[\0,\1]],condition[lessOrEqual[\0,\2]],iteration[increment[\0]],code:\4])
atInFor: RETURN(for_each[item[\0],index[\1],collection[\2],code:\4])
inFor: RETURN(for_each[item[\0],index[variable:index],collection[\1],code:\4])
indexInFor: RETURN(for_each[index:[\0],collection[\1],code:\4])

// function definition

functionParameter: {
  nothing: >>
	"/": comment()
  letter: id(4) {
		nothing: >>
		"/": comment()
		letter: id(5) CREATE(3,parameter:\5[type:\4]) afterParam
		other: CREATE(3,parameter:\4) afterParam
	}
	"$": >> id(4) CREATE(3,parameter:\4[this]) afterParam
  ")": >> afterParams
  other: SWITCHTYPE(0) {
    object: expected("Identifier_or_)")
    class: expected("Identifier_or_)")
    other: notFunctionDef
  }
}
afterParam: {
  nothing: >>
	"/": comment()
  "=": >> value(4) INSERT(3,default[\4]) paramEnd
  other: paramEnd
}
paramEnd: INSERT(1,\3) {
  nothing: >>
	"/": comment()
  ",": >> functionParameter
  ")": >> afterParams
  other: SWITCHTYPE(0) {
    object: expected(",_or_)")
		class: expected(",_or_)")
    other: notFunctionDef
  }
}
afterParams: {
  nothing: >>
	"/": comment()
  "{": code(2) INSERT(1,\2) definitionEnd
  "-": >> EXPECT(">") value(2) INSERT(1,code[return[\2]]) definitionEnd
  other: SWITCHTYPE(0) {
    object: expected("{_or_->")
		class: INSERT(0,\1) class
    other: notFunctionDef
  }
}
definitionEnd: SWITCHTYPE(1) {
  function: RETURN(\1)
  function_anon: INSERT(0,\1) separator
  other: INSERT(0,\1) class
}
notFunctionDef: SWITCHTYPE(1) {
  function: LOADPOS INSERT(0,variable:\2) functionCall
  function_anon: LOADPOS value(1) EXPECT(")") INSERT(0,brackets[\1]) separator
}

// not function definition

var: {
  nothing: >>
	"/": >> {
		"/": slashComment() var
		"*": slashComment() var
		other: slashOperator
	}
  ".": >> dot
  "(": >> functionCall
  "[": >> index
  op: operator
  other: syntaxError
}
dot: INSERT(0,dot) {
  nothing: >>
	"/": comment()
  letter: id(1) INSERT(0,variable:\1) var
  other: expected("Identifier")
}
index: value(1) EXPECT("]") INSERT(0,atIndex) INSERT(0,\1) indexBody
indexBody: {
  nothing: >>
	"/": >> {
		"/": slashComment() indexBody
		"*": slashComment() indexBody
		other: slashOperator
	}
  "[": >> index
  ".": >> dot
  "(": >> functionCall
  op: operator
  other: syntaxError
}

// function call

functionCall: CREATE(1,parameters) {
  nothing: >>
	"/": comment()
  ")": >> callParameterEnd
	other: callParameter
}
callParameter: value(2) INSERT(1,\2) {
  nothing: >>
	"/": comment()
  ",": >> callParameter
  ")": >> callParameterEnd
  other: expected(",_or_)")
}
callParameterEnd: INSERT(0,functionCall) INSERT(0,\1) callParameterEndBody
callParameterEndBody: {
	nothing: >>
	"/": >> {
		"/": slashComment() callParameterEndBody
		"*": slashComment() callParameterEndBody
		other: slashOperator
	}
	".": >> dot
	"(": >> functionCall
	"[": >> index
	op: operator
	other: PROCESS(0) RETURN(\0)
}

parameters: CREATE(1,parameters) {
  nothing: >>
	"/": comment()
  ")": >> parameterEnd
	other: parameter
}
parameter: value(2) INSERT(1,\2) {
  nothing: >>
	"/": comment()
  ",": >> parameter
  ")": >> parameterEnd
  other: expected(",_or_)")
}
parameterEnd: INSERT(0,functionCall) INSERT(0,\1) separator

// operator

operator: PROCESS(0) {
  nothing: >>
  "=": >> value(1) RETURN(equate[\0,\1])
  "+": >> {
    "=": >> value(1) RETURN(add[\0,\1])
    "+": >> RETURN(increment[\0])
    other: invalid("operator")
  }
  "-": >> {
    "=": >> value(1) RETURN(subtract[\0,\1])
    "-": >> RETURN(decrement[\0])
    other: invalid("operator")
  }
  "*": >> EXPECT("=") value(1) RETURN(multiply[\0,\1])
  other: RETURN(\0)
}
slashOperator: PROCESS(0) {
	"=": value(1) RETURN(divide[\0,\1])
	other: expected("/_or_=")
}

// value

value: CREATE(0,value) variable
variable: {
  nothing: >>
	"/": comment()
  closure: PROCESS(0) RETURN(\0)
  digit: number(1) INSERT(0,\1) separator
  letter: id(1) CREATE(2,variable:\1) {
		nothing: >>
		"/": comment()
		"<": SAVEPOS >> variableSubType
		other: INSERT(0,\2) separator
	}
	"$": >> id(1) INSERT(0,variable:\1[this]) separator
  minus: >> CLEAR {
    digit: number(1) INSERT(0,\1) separator
    other: value(1) INSERT(0,negative[\1]) separator
  }
  "!": >> value(1) INSERT(0,not[\1]) separator
  "(": >> SAVEPOS CREATE(1,function) functionParameter
  "[": >> array(1) INSERT(0,\1) separator
  "{": >> CREATE(1,object) object
  quotes: >> CLEAR string
  other: expected("Value")
}
variableSubType: varSubType(3) SWITCHTYPE(3) {
	subtype: INSERT(2,\3) {
		nothing: >>
		"/": comment()
		",": >> variableSubType
		">": >> {
			nothing: >>
			"/": comment()
			"(": INSERT(0,\2) separator
			other: notSubType
		}
		other: notSubType
	}
	other: notSubType
}
varSubType: id(0) varSubTypeLoop
varSubTypeLoop: {
	nothing: >>
	"/": comment()
	"<": >> varSubType(1) SWITCHTYPE(1) {
		subtype: INSERT(0,\1) varSubTypeLoop
		other: RETURN(value)
	}
	",": RETURN(subtype:\0)
	">": RETURN(subtype:\0)
	other: RETURN(value)
}
notSubType: LOADPOS INSERT(0,variable:\1) separator


// number

number: CLEAR >> {
  digit: >>
  ".": {
    digit: >>
    other: STORE(1) RETURN(decimal:\1) RETURN
  }
  other: STORE(1) RETURN(integer:\1) RETURN
}

// string

string: {
  "\": SKIP {
    "(": CREATE(1,stringSequence) stringBrackets
    other: ADD("\") >> string
  }
  quotes: STORE(2) >> INSERT(0,string:\2) separator
  other: >>
}
stringBrackets: STORE(2) >> SWITCH(2) {
  "": stringValue
  other: INSERT(1,string:\2) stringValue
}
stringValue: value(2) EXPECT(")") INSERT(1,\2) CLEAR stringSequence
stringSequence: {
  "\": SKIP {
    "(": stringBrackets
    other: ADD("\") >> stringSequence
  }
  quotes: STORE(2) >> SWITCH(2) {
    "": INSERT(0,\1) separator
    other: INSERT(1,string:\2) INSERT(0,\1) separator
  }
  other: >>
}

// array

array: CREATE(0,array) arrayItem
arrayItem: value(1) INSERT(0,\1) {
  nothing: >>
	"/": comment()
  ",": >> arrayItem
  "]": >> RETURN(\0)
  other: expected(",_or_]")
}

//object

object: {
  nothing: >>
	"/": comment()
  letter: id(2) EXPECT(":") value(3) INSERT(1,entry[variable:\2,\3])
  "}": >> INSERT(0,\1) separator
	other: expected("Identifier_or_}")
}

// class

class: {
  nothing: >>
	"/": comment()
  letter: id(3) SWITCH(3) {
		"get": id(3) CREATE(1,field:\3) getCode
		other: {
			nothing: >>
			"/": comment()
			"<": >> fieldSubType
			letter: id(1) SWITCH(1) {
				"get": id(1) CREATE(1,field:\1[type:\3]) getCode
				other: {
					nothing: >>
					"/": comment()
					"(": >> CREATE(1,method:\1[type:\3]) functionParameter
					other: fieldNames
				}
			}
			"=": >> value(2) INSERT(0,field:\3[default[\2]]) class
			"(": >> CREATE(1,method:\3) functionParameter
			other: expected("Field_name,_get,_subtype,_=_or_(")
		}
	}
  "(": >> CREATE(1,constructor) functionParameter
  "}": >> RETURN(\0)
	other: expected("Identifier,_}_or_(")
} 
fieldNames: {
	nothing: >>
	"/": comment()
	"=": >> value(2) INSERT(0,field:\1[type:\3,default[\2]]) class
	",": >> INSERT(0,field:\1[type:\3]) id(1) fieldNames
	other: INSERT(0,field:\1[type:\3]) class
}
fieldSubType: subtype(4) INSERT(3,\4) {
	nothing: >>
	"/": comment()
	",": >> fieldSubType
	">": >> id(1) SWITCH(1) {
		"get": id(1) INSERT(0,field:\1[type:\3]) getCode
		other: fieldNames
	}
	other: expected("Comma_or_>")
}
getCode: {
	nothing: >>
	"/": comment()
	"-": >> EXPECT(">") value(2) INSERT(1,get[code[return[\2]]]) INSERT(0,\1) class
	"{": code(2) INSERT(1,get[code:\2]) INSERT(0,\1) class
	other: INSERT(1,get) INSERT(0,\1) class
}

// separator

separator: {
  nothing: >>
  ".": SAVEPOS >> {
    ".": LOADPOS PROCESS(0) RETURN(\0)
    other: INSERT(0,dot) variable
  }
  "(": >> parameters
  "[": >> value(1) EXPECT("]") INSERT(0,atIndex) INSERT(0,\1)
  "+": >> INSERT(0,addition) variable
  "-": >> INSERT(0,subtraction) variable
  "*": >> INSERT(0,multiplication) variable
  "/": >> {
    "/": slashComment() separator
		"*": slashComment() separator
    other: INSERT(0,division) variable
  }
  "=": >> {
    "=": >> INSERT(0,equal) variable
    other: invalid("separator")
  }
  "!": >> {
    "=": >> INSERT(0,notequal) variable
    other: invalid("separator")
  }
  "<": >> {
    "=": >> INSERT(0,lessOrEqual) variable
    other: INSERT(0,less) variable
  }
  ">": >> {
    "=": >> INSERT(0,moreOrEqual) variable
    other: INSERT(0,more) variable
  }
  "&": >> {
    "&": >> INSERT(0,and) variable
    other: INSERT(0,bitAnd) variable
  }
  "|": >> {
    "|": >> INSERT(0,or) variable
    other: INSERT(0,bitOr) variable
  }
  "?": >> INSERT(0,ifOp) variable
  colon: >> INSERT(0,elseOp) variable
  other: PROCESS(0) RETURN(\0)
}

// priorities

dot.priority = 17
functionCall.priority = 17
atIndex.priority = 17
multiplication.priority = 14
division.priority = 14
mod.priority = 14
addition.priority = 13
subtraction.priority = 13
bitAnd.priority = 11
bitOr.priority = 9
notequal.priority = 7
equal.priority = 7
less.priority = 7
lessOrEqual.priority = 7
more.priority = 7
moreOrEqual.priority = 7
and.priority = 6
or.priority = 6
ifOp.priority = 4
elseOp.priority = 4