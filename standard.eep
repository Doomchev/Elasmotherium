minus = -
quotes = " "
colon = :
digit = 0-9
letter = a-z A-Z _
idSymbol = digit letter
fileSymbol = digit letter .
spacing = tab space
nothing = tab space newline
op = + - / * =
closure = ) ] }


ERROR expected: \0 expected
ERROR syntaxError: Syntax error
ERROR invalid: Invalid \0
ERROR error: \0


root: сodeLines(0) CREATE(0,code_main:\0)

сodeLines: CREATE(0,code) codeLinesBody
codeLinesBody: {
	nothing: >>
	eof: RETURN(\0)
	"}": RETURN(\0)
	"#": >> CLEAR {
		letter: >>
		other: STORE(1) SWITCH(1) {
			"include": skip() {
				fileSymbol: >>
				other: STORE(1) INCLUDE(1) codeLinesBody
			}
			other: invalid("directive")
		}
	}
	other: codeLine(1) INSERT(0,\1)
}

code: {
	nothing: >>
	"{": >> сodeLines(0) EXPECT("}") RETURN(\0)
	other: CREATE(0,code) codeLine(1) INSERT(0,\1) RETURN(\0)
}

skip: {
	nothing: >>
	other: CLEAR RETURN
}

id: {
  nothing: >>
  letter: CLEAR >> {
    idSymbol: >>
    other: STORE(0) RETURN(\0)
  }
  other: CLEAR STORE(0) RETURN(\0)
}

// code line

codeLine: {
  nothing: >>
	letter: CLEAR >> {
		idSymbol: >>
		other: STORE(2) SWITCH(2) {
			"for": EXPECT("(") for
			"do": code(2) RETURN(do[code:\2])
			"if": EXPECT("(") value(0) EXPECT(")") code(1) SAVEPOS id(2) SWITCH(2) {
        "else": code(2) RETURN(if_else[condition[\0],code:\1,code_else:\2])
        other: LOADPOS RETURN(if[condition[\0],code:\1])
      }
      "break": {
        spacing: SKIP
        "(": >> number(0) EXPECT(")") RETURN(break[times:\0])
        other: RETURN(break)
      }
      "return": {
        nothing: >>
        "(": >> value(0) EXPECT(")") RETURN(return[\0])
        other: RETURN(return_null)
      }
      "end": RETURN(end)
      other: {
        nothing: >>
        "(": >> SAVEPOS CREATE(0,value) CREATE(1,function:\2) functionParameter
        "{": >> CREATE(0,class:\2) class
				letter: id(3) CREATE(0,value[variable:\2[class:\3]]) var
        other: CREATE(0,value[variable:\2]) var
      }
		}
	}
	"$": >> id(2) CREATE(0,value[variable:\2[this]]) var
  "[": >> array(1) INSERT(0,\1) {
    nothing: >>
    "[": >> index
    ".": >> dot
    other: expected("[_or_.")
  }
  "/": >> EXPECT("/") comment() codeLine
	other: syntaxError
}

comment: {
  newline: RETURN
  other: >>
}

// for loop

for: id(0) CREATE(0,variable:\0) {
  nothing: >>
  "=": >> value(1) {
    nothing: >>
    ";": >> value(2) EXPECT(";") codeLine(3) forSeparator(4) standardFor
    ".": >> EXPECT(".") {
      "<": >> value(2) forSeparator(4) lessRangeFor
      other: value(2) forSeparator(4) fullRangeFor
    }
    other: syntaxError
  }
  letter: id(1) SWITCH(1) {
    "at": id(1) CREATE(1,variable:\0) id(2) SWITCH(2) {
      "in": value(2) forSeparator(4) atInFor
      other: expected("in")
    }
    "in": value(1) forSeparator(4) inFor
    "indexin": value(1) forSeparator(4) indexInFor
    "keyin": value(1) forSeparator(4) indexInFor
    other: expected("=,_at,_in_or_indexin")
  }
  other: syntaxError
}

forSeparator: {
  nothing: >>
  ")": >> code(0) RETURN(\0)
  ";": >> CREATE(0,code) for(1) INSERT(0,\1) RETURN(\0)
  other: expected(";_or_)")
}
standardFor: RETURN(for[init[equate[\0,\1]],condition:\2,iteration:\3,code:\4])
lessRangeFor: RETURN(for[init[equate[\0,\1]],condition[less[\0,\2]],iteration[increment[\0]],code:\4])
fullRangeFor: RETURN(for[init[equate[\0,\1]],condition[lessOrEqual[\0,\2]],iteration[increment[\0]],code:\4])
atInFor: RETURN(for_each[item[\0],index[\1],collection[\2],code:\4])
inFor: RETURN(for_each[item[\0],index[variable:index],collection[\1],code:\4])
indexInFor: RETURN(for_each[index:[\0],collection[\1],code:\4])

// function definition

functionParameter: {
  nothing: >>
  letter: id(4) {
		nothing: >>
		letter: id(5) CREATE(3,parameter:\4[class:\5]) afterParam
		other: notFunctionDef
	}
	"$": >> id(4) CREATE(3,parameter[this:\4]) afterParam
  ")": >> afterParams
  other: SWITCHTYPE(0) {
    object: expected("Identifier_or_)")
    class: expected("Identifier_or_)")
    other: notFunctionDef
  }
}
afterParam: {
  nothing: >>
  "=": >> value(4) INSERT(3,default[\4]) paramEnd
  other: paramEnd
}
paramEnd: INSERT(1,\3) {
  nothing: >>
  ",": >> functionParameter
  ")": >> afterParams
  other: SWITCHTYPE(0) {
    object: expected(",_or_)")
		class: expected(",_or_)")
    other: notFunctionDef
  }
}
afterParams: {
  nothing: >>
  "{": code(2) INSERT(1,\2) definitionEnd
  "-": >> EXPECT(">") value(2) INSERT(1,code[return[\2]]) definitionEnd
  other: SWITCHTYPE(0) {
    object: expected("{_or_->")
		class: expected("{_or_->")
    other: notFunctionDef
  }
}
definitionEnd: SWITCHTYPE(1) {
  function: RETURN(\1)
  function_anon: INSERT(0,\1) separator
  other: INSERT(0,\1) class
}
notFunctionDef: SWITCHTYPE(1) {
  function: LOADPOS INSERT(0,variable:\2) functionCall
  function_anon: LOADPOS value(1) EXPECT(")") INSERT(0,brackets[\1]) separator
}

// not function definition

var: {
  nothing: >>
  ".": >> dot
  "(": >> functionCall
  "[": >> index
  op: operator
  other: syntaxError
}
dot: INSERT(0,dot) {
  nothing: >>
  letter: id(1) INSERT(0,variable:\1) var
  other: expected("Identifier")
}
index: value(1) EXPECT("]") INSERT(0,atIndex) INSERT(0,\1) {
  nothing: >>
  "[": >> index
  ".": >> dot
  "(": >> functionCall
  op: operator
  other: syntaxError
}

// function call

functionCall: CREATE(1,parameters) {
  nothing: >>
  ")": >> callParameterEnd
	other: callParameter
}
callParameter: value(2) INSERT(1,\2) {
  nothing: >>
  ",": >> callParameter
  ")": >> callParameterEnd
  other: expected(",_or_)")
}
callParameterEnd: INSERT(0,functionCall) INSERT(0,\1) {
	nothing: >>
	".": >> dot
	"(": >> functionCall
	"[": >> index
	op: operator
	other: PROCESS(0) RETURN(\0)
}

parameters: CREATE(1,parameters) {
  nothing: >>
  ")": >> parameterEnd
	other: parameter
}
parameter: value(2) INSERT(1,\2) {
  nothing: >>
  ",": >> parameter
  ")": >> parameterEnd
  other: expected(",_or_)")
}
parameterEnd: INSERT(0,functionCall) INSERT(0,\1) separator

// operator

operator: PROCESS(0) operatorBody
operatorBody: {
  nothing: >>
  "=": >> value(1) RETURN(equate[\0,\1])
  "+": >> {
    "=": >> value(1) RETURN(add[\0,\1])
    "+": >> RETURN(increment[\0])
    other: invalid("operator")
  }
  "-": >> {
    "=": >> value(1) RETURN(subtract[\0,\1])
    "-": >> RETURN(decrement[\0])
    other: invalid("operator")
  }
  "*": >> EXPECT("=") value(1) RETURN(multiply[\0,\1])
  "/": >> {
    "/": comment() operatorBody
    "=": value(1) RETURN(divide[\0,\1])
    other: invalid("operator")
  }
  other: RETURN(\0)
}

// value

value: CREATE(0,value) variable
variable: {
  nothing: >>
  closure: PROCESS(0) RETURN(\0)
  digit: number(1) INSERT(0,\1) separator
  letter: id(1) INSERT(0,variable:\1) separator
	"$": >> id(1) INSERT(0,variable:\1[this]) separator
  minus: >> CLEAR {
    digit: number(1) INSERT(0,\1) separator
    other: value(1) INSERT(0,negative[\1]) separator
  }
  "!": >> value(1) INSERT(0,not[\1]) separator
  "(": >> SAVEPOS CREATE(1,function_anon) functionParameter
  "[": >> array(1) INSERT(0,\1) separator
  "{": >> CREATE(1,object) object
  quotes: >> CLEAR string
  other: expected("Value")
}

// number

number: CLEAR >> {
  digit: >>
  ".": {
    digit: >>
    other: STORE(1) RETURN(decimal:\1) RETURN
  }
  other: STORE(1) RETURN(integer:\1) RETURN
}

// string

string: {
  "\": SKIP {
    "(": CREATE(1,stringSequence) stringBrackets
    other: ADD("\") >> string
  }
  quotes: STORE(2) >> INSERT(0,string:\2) separator
  other: >>
}
stringBrackets: STORE(2) >> SWITCH(2) {
  "": stringValue
  other: INSERT(1,string:\2) stringValue
}
stringValue: value(2) EXPECT(")") INSERT(1,\2) CLEAR stringSequence
stringSequence: {
  "\": SKIP {
    "(": stringBrackets
    other: ADD("\") >> stringSequence
  }
  quotes: STORE(2) >> SWITCH(2) {
    "": INSERT(0,\1) separator
    other: INSERT(1,string:\2) INSERT(0,\1) separator
  }
  other: >>
}

// array

array: CREATE(0,array) arrayItem
arrayItem: value(1) INSERT(0,\1) {
  nothing: >>
  ",": >> arrayItem
  "]": >> RETURN(\0)
  other: expected(",_or_]")
}

//object

object: {
  nothing: >>
  letter: id(2) EXPECT(":") value(3) INSERT(1,entry[variable:\2,\3])
  "}": >> INSERT(0,\1) separator
}

// class

class: {
  nothing: >>
  letter: id(3) {
		nothing: >>
		letter: id(1) fieldNames
		"(": >> CREATE(1,method:\3) functionParameter
		other: expected("Field_name_or_(")
	}
  "(": >> CREATE(1,constructor) functionParameter
  "}": >> RETURN(\0)
	other: expected("Identifier,_}_or_(")
} 
fieldNames: {
	nothing: >>
	"=": >> value(2) INSERT(0,field:\1[class:\3,\2]) {
		letter: id(1) fieldNames
		other: class
	}
	",": >> INSERT(0,field:\1[class:\3]) id(1) fieldNames
	other: INSERT(0,field:\1[class:\3]) class
}

// separator

separator: {
  nothing: >>
  ".": SAVEPOS >> {
    ".": LOADPOS PROCESS(0) RETURN(\0)
    other: INSERT(0,dot) variable
  }
  "(": >> parameters
  "[": >> value(1) EXPECT("]") INSERT(0,atIndex) INSERT(0,\1)
  "+": >> INSERT(0,addition) variable
  "-": >> INSERT(0,subtraction) variable
  "*": >> INSERT(0,multiplication) variable
  "/": >> {
    "/": comment()
    other: INSERT(0,division) variable
  }
  "=": >> {
    "=": >> INSERT(0,equal) variable
    other: invalid("separator")
  }
  "!": >> {
    "=": >> INSERT(0,notequal) variable
    other: invalid("separator")
  }
  "<": >> {
    "=": >> INSERT(0,lessOrEqual) variable
    other: INSERT(0,less) variable
  }
  ">": >> {
    "=": >> INSERT(0,moreOrEqual) variable
    other: INSERT(0,more) variable
  }
  "&": >> {
    "&": >> INSERT(0,and) variable
    other: INSERT(0,bitAnd) variable
  }
  "|": >> {
    "|": >> INSERT(0,or) variable
    other: INSERT(0,bitOr) variable
  }
  "?": >> INSERT(0,ifOp) variable
  colon: >> INSERT(0,elseOp) variable
  other: PROCESS(0) RETURN(\0)
}

// priorities

dot.priority = 17
functionCall.priority = 17
atIndex.priority = 17
multiplication.priority = 14
division.priority = 14
mod.priority = 14
addition.priority = 13
subtraction.priority = 13
bitAnd.priority = 11
bitOr.priority = 9
notequal.priority = 7
equal.priority = 7
less.priority = 7
lessOrEqual.priority = 7
more.priority = 7
moreOrEqual.priority = 7
and.priority = 6
or.priority = 6
ifOp.priority = 4
elseOp.priority = 4