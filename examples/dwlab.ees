Color extends Int32 {
	Int r, g, b, alpha
	($r, $g = $r, $b = $r, $alpha = 255)
}

DrawableRectangle {
	get Int(0>..) width
	get Int(0>..) height
	draw(Int x, Int y) {}
}

Texture extends DrawableRectangle {
	(Int(0<..) width, Int(0<..) height) {}
	(String fileName) {}
	put(Int(0..<$width) x, Int(0..<$height) y, Color c) {}
	
	(Int(0<..) width, Int(0<..) height, Color function(Int x, Int y)) {
		this(width, height)
		for(y = 0 ..< height, x = 0 ..< width) $put(x, y, function(x, y))
	}
	draw(x = 0, y = 0, width = $width, height = $height, tx = 0, ty = 0, twidth = width, theight = height) {}
}

Window {
	(Int(0<..) width, Int(0<..) height) {}
	(DrawableRectangle object) {}
}

Window().render(Texture(128, 128, (x, y) -> Color((x >> 4 + y >> 4) & 1 ? 255 : 0)))

// sprite module

Sprite {
	Float x, y
	Float(0..) halfWidth, halfHeight
	get width -> halfWidth * 2.0
	set width(value) -> halfWidth = value * 0.5
	get height -> halfHeight * 2.0
	set height(value) -> halfHeight = value * 0.5
	
	moveTo(Sprite sprite) {
		moveTo(sprite.x, sprite.y)
	}
	
	draw() {
		c = Camera.current
		drawVisual(c.xToScreen($x - $halfWidth), c.yToScreen($y - $halfWidth), c.widthToScreen($width)
				, c.heightToScreen($height))
	}
	
	drawVisual(x, y, width, height) {
	}
}

// camera

import sprite

Camera extends Sprite {
	static Camera current
	Sprite viewport
	Float _k, _dx, _dy
	Float(0<..) halfWidth, halfHeight
	xFromScreen(x) -> x / $_xk - $_dx
	yFromScreen(y) -> y / $_yk - $_dy
	widthFromScreen(width) -> width / $_xk
	heightFromScreen(height) -> height / $_yk
	xToScreen(x) -> (x + $_dx) * $_xk
	yToScreen(y) -> (y + $_dy) * $_yk
	widthToScreen(x) -> x * $_xk
	heightToScreen(y) -> y * $_yk
	
	moveTo(x, y) {
		super.moveTo(x, y)
		init()
	}
	
	init() {
		$_xk = $viewport.halfWidth / $halfWidth
		$_yk = $viewport.halfHeight / $halfHeight
		$_dx = $viewport.y / $_xk - $x
		$_dy = $viewport.y / $_yk - $y
	}
}

// sprite.angular

import sprite

AngularSprite of Sprite {
	Float angle, speed
	get dx -> $speed * cos($angle)
	get dy -> $speed * sin($angle)
	setDxDy(dx, dy) {
		$speed = distance(dx, dy)
		$angle = ATan(dx, dy)
	}
}

// texture.image

import texture

Image {
	Texture texture
	Float x, y
	Float(0<..) width, height
	
	draw(x, y, width, height) {
		texture.draw(x, y, width, height, $x, $y, $width, $height)
	}
}

// sprite.imageVisual

import sprite

ImageVisual of Sprite {
	Image image
	
	drawVisual(x, y, width, height) {
		texture.draw(x, y, width, height, $x, $y, $width, $height)
	}
}

// sprite.shiftedVisual

ShiftedSpriteVisual extends Sprite {
	Float iDx, iDy
	Float(0<..) iWidthK, iHeightK

	draw() {
		c = Camera.current
		drawVisual(c.xToScreen($x + ($iDx - $halfWidth) * $iWidthK), c.yToScreen($y + ($iDy - $halfHeight) * $iHeightK)
			, c.widthToScreen($width * $iWidthK), c.heightToScreen($height * $iHeightK))
	}	
}

// sprite.shaped

ShapedSprite of Sprite {
	Shape shape
}

// sprite.shaped.filled

SolidFillSprite of ShapedSprite {
	Color fillColor

	drawVisual(x, y, width, height) {
		super.draw(x, y, width, height)
		shape.drawFilled(x, y, width, height)
	}
}

// sprite.outlined

OutlinedSprite of ShapedSprite {
	Color outlineColor
	Float(0<..) size

	drawVisual(x, y, width, height) {
		super.draw(x, y, width, height)
		shape.drawOutline(outlineColor, size, x, y, width, height)
	}
}

// shape

enum Shape {
	abstract drawFilled(Color color, Float x, Float y, Float(0<..) width, Float(0<..) height)
	abstract drawOutline(Color color, Float(0<..) size, Float x, Float y, Float(0<..) width, Float(0<..) height)
}

// shape.rectangle

import shape

Shape.RectangleShape

// shape.rectangle.filled

import graphics.filled.rectangle

Shape.RectangleShape.drawFilled(x, y, width, height) {
	drawFilledRectangle(x, y, width, height)
}

// shape.rectangle.outlined

import graphics.outlined.rectangle

Shape.RectangleShape.drawOutline(color, size, x, y, width, height) {
	drawOutlinedRectangle(color, size, x, y, width, height)
}

// shape.pill

import shape

Shape.PillShape

// shape.pill.filled

import graphics.filled.pill

Shape.RectangleShape.drawFilled(color, x, y, width, height) {
	drawFilledPill(color, x, y, width, height)
}

// shape.pill.outlined

import graphics.outline.pill

Shape.RectangleShape.drawOutline(color, size, x, y, width, height) {
	drawOutlinedPill(color, size, x, y, width, height)
}

// sprite visibility

import sprite

SpriteVisibility of Sprite {
	Bool visible
	
	draw() {
		visible? super.draw()
	}
}