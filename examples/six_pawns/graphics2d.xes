Image {
  (this.texture, this.x = 0, this.y = 0, this.width = this.texture.width, this.height = this.texture.height) {
  }

	map(fileName, cellXQuantity = 1, cellYQuantity = 1) {
		texture = Texture.load(fileName, 1)
		cellWidth = texture.width / cellXQuantity
		cellHeight = texture.height / cellYQuantity
		imageList = List(cellXQuantity * cellYQuantity)
		index = 0
		for(y = 0 ..< cellYQuantity; x = 0 ..< cellXQuantity) {
      imageList[index] = Image(texture, x * cellWidth, y * cellHeight, cellWidth, cellHeight)
      index++
		}
		return(imageList)
	}
	
	draw(x = 0, y = 0, width = this.width, height = this.height) {
		this.texture.draw(x, y, width, height, this.x, this.y, this.width, this.height)
	}
}


Camera = {
	default: {
		x: 0
		y: 0
		xScale: 1
		yScale: 1
	}
}


Layer {
  contents: []
  
  onFirstCollision(x, y, function) {
    for(object in this.contents) if(object.onFirstCollision(x, y, function)) return(true)
  }
	
	draw() {
		for(object in this.contents) object.draw()
	}  
}


Sprite {
  (this.image, this.x = 0, this.y = 0, width = this.image ? this.image.width : 0
			, height = this.image ? this.image.height : 0) {
    this.halfWidth = width / 2
    this.halfHeight = height / 2
  }
  
  onFirstCollision(x, y, function) {
    if(collidesWith(x, y)) {
      function(object)
      return(true)
    }
  }
  
  collidesWith(x, y) {
    return(abs(this.x - x) < this.halfWidth && abs(this.y - y) < this.halfHeight)
  }
  
  draw() {
    this.image.draw(this.x - this.halfWidth, this.y - this.halfHeight / 2)
  }
}


Tilemap {
	(this.cellXQuantity, this.cellYQuantity, this.images, tileNumber = 0) {
		this.tilesQuantity = this.images.length
		this.cellWidth = this.images[0].width
		this.cellHeight = this.images[0].height
		this.tiles = List(this.cellXQuantity * this.cellYQuantity, tileNumber)
	}
	
	draw(x = 0, y = 0) {
		for(tileY = 0 ..< this.cellYQuantity; tileX = 0 ..< this.cellXQuantity) {
      this.images[this.tiles[tileX + tileY * this.cellXQuantity]]
          .draw(x + tileX * this.cellWidth, y + tileY * this.cellHeight)
		}
	}
	
	getTile(cellX, cellY) -> this.tiles[cellX + cellY * this.cellXQuantity]
	
	setTile(cellX, cellY, tileNumber) {
		this.tiles[cellX + cellY * this.cellXQuantity] = tileNumber
	}
	
	getTileX(screenX) -> screenX / this.cellWidth
	getTileY(screenY) -> screenY / this.cellHeight
}