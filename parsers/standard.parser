/// symbols

quotes = " "
digit = 0-9
letter = a-z A-Z
idSymbol = digit letter
fileSymbol = digit letter .
spacing = tab space
nothing = tab space newline
op = + - * / =

ERROR error: \0

// functions

FUNCTION brackets, 18, "(a)"

FUNCTION dot, 17, "a.b"
FUNCTION callFunction, 17
FUNCTION at, 17, "a[b]"

FUNCTION negative, 16, "-a"
FUNCTION not, 16, "!a"

FUNCTION multiplication, 14, "a * b"
FUNCTION division, 14, "a / b"
FUNCTION mod, 14, "a % b"
FUNCTION addition, 13, "a + b"
FUNCTION subtraction, 13, "a - b"
FUNCTION bitAnd, 11, "a & b"
FUNCTION bitOr, 10, "a | b"
FUNCTION less, 8, "a < b"
FUNCTION more, 8, "a > b"
FUNCTION lessOrEqual, 8, "a <= b"
FUNCTION moreOrEqual, 8, "a >= b"
FUNCTION equal, 7, "a == b"
FUNCTION notEqual, 7, "a != b"
FUNCTION and, 6, "a && b"
FUNCTION or, 5, "a || b"
FUNCTION ifOp, 4

FUNCTION increment, 3
FUNCTION decrement, 3
FUNCTION equate, 3, "a = b"
FUNCTION add, 3
FUNCTION subtract, 3
FUNCTION multiply, 3
FUNCTION divide, 3

FUNCTION break, 0
FUNCTION continue, 0
FUNCTION returnVoid, 0
FUNCTION returnValue, 0



/// default symbol switch

DEFAULT nothing: >>
DEFAULT "//": >> slashComment()
DEFAULT "/*": >> multiLineComment()



/// base

root: {
	"import": >> id() CREATE(module) EXPECT(";") root
  other: сodeLines
}


сodeLines: {
  eof: RETURN
  "}": RETURN
  other: codeLine()
}

code: CREATE(code) {
  "{": >> сodeLines() EXPECT("}", "No } after block") RETURN
  other: codeLine
}



/// code line

codeLine: {
	letter: id() {
    // Type var
    // Type function
    letter: CREATE(link) def
    // Type<Type> var
    // Type<Type> function
    "<": >> type() def
    // function(
    "(": >> {
      ")": >> {
        // function() codeLine;
        // function() {code}
        // function() -> value;
        "{", "-", letter: CREATE(function) functionCode
        // call();
        // call().field
        // call().method(
        // call()[index]
        other: CREATE(formula) CREATE(link) MOVE(link, formula) CREATE(parameters) callParameterEnd
      }
      //function(Type
      //call(value
      letter: id() {
        //function(Type name
        letter: CREATE(link) CREATE(function) id() CREATE(variable) MOVE(link, variable) functionParamDefault
        //function(Type< name
        //function(var
        other: CREATE(link) CREATE(formula) CREATE(link) MOVE(link, formula) CREATE(parameters) CREATE(formula) MOVE(link, formula) separator() MOVE(formula, parameters) {
          ",": >> callParameter
          ")": >> callParameterEnd
          other: ("Invalid separator, comma or ) expected")
        }
      }
      other: CREATE(formula) CREATE(link) MOVE(link, formula) functionCall
    }
    // var operator;
    // object.
    // object[
    other: CREATE(link) CREATE(formula) MOVE(link, formula) var
  }
  
  /// keywords
  
  "class": >> class() MOVE(class, code) RETURN
  "for": >> for
  "repeat": >> CREATE(block, repeat) code() SET(code, code) MOVE(block, code) RETURN
  "if": >> EXPECT("(", "( expected after if") formula() {
    "then": then
    other: CREATE(block, if) SET(condition, formula) EXPECT(")", ") expected after formula") code() SET(code, code) {
      "else": >> code() SET(else, code) SET(if_else) MOVE(block, code) RETURN
      other: MOVE(block, code) RETURN
    }
  }
  "break": >> CREATE(call) MOVE(break, call) MOVE(call, code) codeLineEnd
  "return": >> CREATE(call) {
    ";": >> MOVE(returnVoid, call) MOVE(call, code) RETURN
    other: MOVE(returnValue, call) formula() MOVE(formula, call) MOVE(call, code) codeLineEnd
  }
  
  /// separators
  
  "[": >> CREATE(formula) list() MOVE(list, formula) {
    "[": >> index
    ".": >> dot
    other: error("[ or .")
  }
  ";": >> RETURN
  other: error("$ symbol cannot be start of code line")
}

codeLineEnd: EXPECT(";") RETURN

// Type[<Type...>] var
// Type[<Type...>] function
def: id() {
  // Type function(
  "(": >> CREATE(function) MOVE(link, function) functionParameter
  // Type var = value;
  // Type var;
  ",", ";", "=": varDefault
  other: error("Invalid separator $ in function / variable definition")
}

varDefault: CREATE(variable) {
  // Type var = value
  "=": >> formula() MOVE(formula, variable) varEnd
  other: varEnd
}

varEnd: {
  // Type var,
  ",": >> DUP(link) MOVE(link, variable) MOVE(variable, code) id() varDefault
  // Type var;
  ";": >> MOVE(link, variable) MOVE(variable, code) RETURN
  other: error("Invalid separator $ after variable")
}

// Type function(Type
functionParameter: {
  // Type function(Type var
  letter: id() {
    // function(Type var
    letter: CREATE(link) id() CREATE(variable) MOVE(link, variable) functionParamDefault
    // function(Type<Type> var
    "<": >> type() id() CREATE(variable) MOVE(link, variable) functionParamDefault
    // function(var = formula
    "=": error("Variable without a type")
    // function(var,
    // function(var)
    ",", ")": error("No type defined")
    other: error("Invalid separator $ after function parameter")
  }
  // Type function()
  ")": >> functionCode
  other: error("Identifier or )")
}

functionParamDefault: {
  // Type[<Type>] var = default
  "=": >> formula() MOVE(formula, variable) functionParamEnd
  // Type[<Type>] var
  other: functionParamEnd
}

functionParamEnd: MOVE(variable, function) {
  // function(params, 
  ",": >> functionParameter
  // function(params)
  ")": >> functionCode
  other: error(", or )")
}

functionCode: {
  // [Type ]function([params]) -> expression;
  "->": >> formula() CREATE(call) MOVE(returnValue, call) MOVE(formula, call) CREATE(code) MOVE(call, code) MOVE(code, function) functionEnd
  // [Type ]function([params]) codeLine;
  ";": functionEnd
  other: code() MOVE(code, function) functionEnd
}

functionEnd: MOVE(function, code) RETURN



/// comments

slashComment: {
  eof: RETURN
  "/", nothing, other: >>
  newline: >> RETURN
}

multiLineComment: {
  "*/": >> RETURN
  "/", nothing, other: >>
  eof: error("No closing symbols */ found for multiline comment")
}



/// id

id: {
  letter: CLEAR >> {
    idSymbol: >>
    "/", nothing, other: CREATE(id) RETURN
  }
  other: error("Expected identifier")
}



/// for loop

for: EXPECT("(") CREATE(block, for) {
	letter: variable() {
    "=": >> SET(variable, variable) formula() {
      ")", ";": SET(init, formula) EXPECT(";", "; expected in for definition") formula() SET(condition, formula) {
        // for(Type variable = formula; condition)
        ")": >> forEnd
        // for(Type variable = formula; condition; iterator)
        ";": >> CREATE(code) id() var() SET(iterator, code) forEnd
        other: error("Invalid separator $ in for definition block")
      }
      // for(Type variable = start ..= end
      "..=": >> SET(from, formula) formula() SET(to, formula) SET(for_to) forEnd
      // for(Type variable = start ..< end
      "..<": >> SET(from, formula) formula() SET(until, formula) SET(for_until) forEnd
      other: error("Invalid separator $ in for definition block")
    }
    // for(Type variable: collection)
    ":": >> SET(item, variable) formula() SET(collection, formula) CBV(iterator) SET(for_collection) forEnd
    other: error("Invalid separator $ in for definition block")
  }
	other: error("Variable expected instead of $ in for definition block")
}

forEnd: EXPECT(")") code() SET(code, code) MOVE(block, code) RETURN



/// variable

variable: id() {
	// Type0<Type1>
	"<": >> type()
  // Type name =
  letter: CREATE(link) varName
  // name =
  other: CREATE(variable) RETURN
}

varName: id() CREATE(variable) MOVE(link, variable) RETURN



/// subtype

type: CREATE(link) subtype

subtype: id() CREATE(link) {
  "<": >> subtype()
  ",": >> MOVE(link) subtype
  ">": >> MOVE(link) RETURN
  other: error("Invalid separator $ in type syntax")
}



/// var

var: {
  ".": >> dot
  "(": >> functionCall
  "[": >> index
  op: operator
  "//": >> slashComment()
  "/*": >> multiLineComment()
  other: error("Invalid start $ of variable definition line")
}



/// dot

dot: MOVE(dot, formula) {
  letter: id() CREATE(link) MOVE(link, formula) var
  other: error("Expected identifier after .")
}



/// index

index: MOVE(at, formula) CREATE(parameters) indexValue

indexValue: formula() MOVE(formula, parameters) {
  ",": >> indexValue
  "]": >> afterIndex
  other: error("Invalid separator in object index")
}

afterIndex: MOVE(parameters, formula) {
  "[": >> index
  ".": >> dot
  "(": >> functionCall
  op: operator
  "//": >> slashComment()
  "/*": >> multiLineComment()
  other: error("Invalid symbol $ after index definition")
}



/// function call

functionCall: CREATE(parameters) {
  ")": >> callParameterEnd
  other: callParameter
}

callParameter: formula() MOVE(formula, parameters) {
  ",": >> callParameter
  ")": >> callParameterEnd
  other: error("Invalid separator $ in function call")
}

callParameterEnd: MOVE(callFunction, formula) {
  "{": >> CREATE(id) CREATE(class) classBody() MOVE(class, formula) afterCallParameterEnd
  other: afterCallParameterEnd
}

afterCallParameterEnd: MOVE(parameters, formula) afterCallParameter

afterCallParameter: {
  ".": >> dot
  "(": >> functionCall
  "[": >> index
  ";": MOVE(formula, code) RETURN
  other: error("Invalid separator $ after call parameter")
}



/// operator

operator: CREATE(call) {
  "++": >> MOVE(increment, call) unaryOperator
  "--": >> MOVE(decrement, call) unaryOperator
  "=": >> MOVE(equate, call) binaryOperator
  "+=": >> MOVE(add, call) binaryOperator
  "-=": >> MOVE(subtract, call) binaryOperator
  "/=": >> MOVE(divide, call) binaryOperator
  "*=": >> MOVE(multiply, call) binaryOperator
  other: error("Invalid command symbol $")
}

unaryOperator: MOVE(formula, call) MOVE(call, code) EXPECT(";") RETURN

binaryOperator: MOVE(formula, call) formula() MOVE(formula, call) MOVE(call, code) EXPECT(";") RETURN



/// formula

formula: CREATE(formula) value

value: {
  ")", "]", "}", ",": RETURN
  digit: number() MOVE(value, formula) separator
  letter: id() formulaId
  "this": >> {
    ".": >> id() CREATE(link) MOVE(link, formula) separator
    other: CREATE(this) MOVE(this, formula) separator
  }
  "if": >> EXPECT("(", "Invalid separator $ for if block") CREATE(call) MOVE(ifOp, call) formula() MOVE(formula, call) {
    "then": >> then 
    other: error("Invalid separator for if block")
  }
  "-": >> CREATE(call) MOVE(negative, call) formula() MOVE(formula, call) MOVE(call, formula) separator
  "!": >> formula() CREATE(call) MOVE(not, call) MOVE(formula, call) MOVE(call, formula) separator
  "(": >> formula() EXPECT(")", "No ) found in bracketed value") CREATE(call) MOVE(brackets, call) MOVE(formula, call) MOVE(call, formula) separator
  "[": >> list() MOVE(list, formula) separator
  "{": >> map() MOVE(map, formula) separator
  quotes: >> CLEAR string
  other: error("Value expected")
}

then: formula() MOVE(formula, call) {
  "else": >> formula() MOVE(formula, call) EXPECT(")", "Invalid separator $ / ( expected in if block") MOVE(call, formula) separator
  other: error("Invalid separator $ in if block")
}

formulaId: {
	// var <
	// Type<
	"<": >> CREATE(link) {
		// var0 < var1
		// Type0<Type1
		letter: id()  {
			// Type0<Type1<Type2
			"<": CREATE(link) subtype() MOVE(link) linkParameter
			// Type0<Type1, Type2
			// Type0<Type1>
      ",", ">": CREATE(link) linkParameter
			// var0 < var1 ...
			other: MOVE(link, formula) MOVE(less, formula) CREATE(link) MOVE(link, formula) separator
		} 
		// var < value
		other: MOVE(link, formula) MOVE(less, formula) value
	}
  // var <= value
  "<=": >> CREATE(link) MOVE(link, formula) MOVE(lessOrEqual, formula) value
	"/", other: CREATE(link) MOVE(link, formula) separator
}

linkParameter: MOVE(link) {
  //Type0<Type1>
  ">": >> MOVE(link, formula) EXPECT("(") parameters
  ",": >> id() CREATE(link) linkParameter
  other: error("Invalid separator $ for link parameter")
}



/// separator

separator: {
	".": >> MOVE(dot, formula) value
  "..": RETURN
  "(": >> parameters
  "[": >> valueIndex
  "+": >> MOVE(addition, formula) value
  "-": >> MOVE(subtraction, formula) value
  "*": >> MOVE(multiplication, formula) value
  "/": >> MOVE(division, formula) value
  "//": >> slashComment()
  "/*": >> multiLineComment()
  "==": >> MOVE(equal, formula) value
  "!=": >> MOVE(notEqual, formula) value
  "<": >> MOVE(less, formula) value
	"<=": >> MOVE(lessOrEqual, formula) value
  ">" : >> MOVE(more, formula) value
  ">=": >> MOVE(moreOrEqual, formula) value
  "&": >> MOVE(bitAnd, formula) value
  "&&": >> MOVE(and, formula) value
  "|": >> MOVE(bitOr, formula) value
  "||": >> MOVE(or, formula) value
	"%": >> MOVE(mod, formula) value
  other: RETURN
}

valueIndex: MOVE(at, formula) CREATE(parameters) valueIndexValue

valueIndexValue: formula() MOVE(formula, parameters) {
  ",": >> valueIndexValue
  "]": >> MOVE(parameters, formula) separator
  other: error("Invalid separator $ for index values")
}



/// parameters

parameters: CREATE(parameters) {
  ")": >> parameterEnd
  other: parameter
}

parameter: formula() MOVE(formula, parameters) {
  ",": >> parameter
  ")": >> parameterEnd
  other: error("Invalid separator $ for parameters")
}

parameterEnd: MOVE(callFunction, formula) MOVE(parameters, formula) separator



/// number

number: CLEAR >> {
  digit: >>
  ".": {
    digit: >>
    "/", nothing, other: CREATE(const, float) RETURN
  }
  "/", nothing, other: CREATE(const, int) RETURN
}



/// string

string: {
  "\(": CREATE(stringSequence) stringBrackets
  quotes: CREATE(const, string) >> MOVE(const, formula) separator
  "/", nothing, other: >>
}

stringBrackets: CREATE(const, string) >> >> MOVE(const, stringSequence) stringValue

stringValue: formula() EXPECT(")") MOVE(formula, stringSequence) CLEAR stringSequence

stringSequence: {
  "\(": stringBrackets
  quotes: CREATE(const, string) >> MOVE(const, stringSequence) MOVE(stringSequence, formula) separator
  other: >>
}



/// list

list: CREATE(list) {
	"]": >> RETURN
	other: listItem
}

listItem: formula() MOVE(formula, list) {
  ",": >> listItem
  "]": >> RETURN
  other: error("Invalid separator $ in list body")
}



/// map

map: CREATE(map) mapEntry
mapEntry: {
  letter: id() CREATE(entry) EXPECT(":") formula() MOVE(formula, entry) MOVE(entry, map)
	",": >>
  "}": >> MOVE(map, formula) separator
  other: error("Invalid separator $ in map body")
}



/// class definition

class: id() CREATE(class) {
  "<": >> classParameter
  other: classExtends
}

classParameter: id() CREATE(classParameter) MOVE(classParameter, class) {
  ",": >> classParameter
  ">": >> classExtends
  other: error("Invalid separator for class parameters")
}

classExtends: {
  "extends": >> id() CREATE(link) MOVE(link, class) classBracket
  other: classBracket
}

classBracket: {
  "{": >> classBody
  ";": >> RETURN
  other: error("")
}

classBody: {
  // Type var
  // Type function
  // method(
  letter: id() {
    letter: CREATE(link) id() {
      // Type var,
      // Type var;
      // Type var = value
      ",", ";", "=": classFieldValue
      // Type method(
      "(": >> CREATE(method) MOVE(link, method) methodParameter
      other: error("( expected in class body after identifier")
    }
    // Type0<Type1> var
    // Type0<Type1> method
    "<": >> type() id() {
      "(": >> CREATE(method) MOVE(link, method) methodParameter
      other: classFieldValue
    }
    // method(
    "(": >> CREATE(method) methodParameter
    other: error("Invalid separator $ for class body")
  }
  "create": >> EXPECT("(") CREATE(constructor) methodParameter
  "}": >> RETURN
  other: error("Invalid separator $ for class body")
}

classFieldValue: CREATE(variable) {
  // Type field = value
  "=": >> formula() MOVE(formula, variable) classFieldEnd
  other: classFieldEnd
}

classFieldEnd: {
  // Type field,
  ",": >> DUP(link) MOVE(link, variable) MOVE(variable, class) id() classFieldValue
  // Type field;
  ";": >> MOVE(link, variable) MOVE(variable, class) classBody
  other: error("Invalid separator $ for class field")
}

methodParameter: {
  letter: id() {
    // method(Type var
    letter: CREATE(link) id() CREATE(variable) MOVE(link, variable) methodParamDefault
    // method(Type<Type> var
    "<": >> type() id() CREATE(variable) MOVE(link, variable) methodParamDefault
    // method(var = formula
    "=": error("Type")
    // method(var,
    // method(var)
    ",", ")": error("Invalid separator $ for method parameters")
    other: error("Identifier or subtype")
  }
  // method(field.var
  "field.": >> id() CREATE(field) methodParamDefault
  // Type method()
  ")": >> methodCode
  other: error("Invalid separator $ for method parameters")
}

methodParamDefault: {
  // Type[<Type>] var = default
  "=": >> formula() MOVE(formula, variable) methodParamEnd
  // Type[<Type>] var
  other: methodParamEnd
}

methodParamEnd: MOVE(variable, function) {
  // method(params, 
  ",": >> methodParameter
  // method(params)
  ")": >> methodCode
  other: error("Invalid separator $ for method parameters")
}

methodCode: {
  // [Type ]method([params]) -> expression;
  "->": >> formula() CREATE(call) MOVE(returnValue, call) MOVE(formula, call) CREATE(code) MOVE(call, code) MOVE(code, function) EXPECT(";") methodEnd
  // [Type ]method([params]) codeLine;
  ";": >> methodEnd
  other: code() MOVE(code, function) methodEnd
}

methodEnd: MOVE(function, class) classBody