variable {
  value.resolve(this);
  [this]VarEquate;
}

return {
  v0.resolve(function);
  [function]Return;
}

dot {
  // object = v0.getObject;
  v0.getObject;
  // this = getField(object, v1);
  getField(v0);
  // call(this);
  call;
}

function {
  call;
}

// get object

variable.getObject {
  [this]VarPush;
  // object = this;
  setObject;
}

field.getObject {
  [this]ThisFieldPush;
  // object = this;
  setObject;
}

function.getObject {
  // call(this);
  call;
  // object = this;
  setObject;
}

dot.getObject {
  // object = v0.getObject;
  v0.getObject;
  // this = getField(object, v1);
  getField;
  this.getObject;
}

// equate

equate {
  v0.equate(v1);
}

variable.equate {
  param.resolve(this);
  [this]VarEquate;
}

field.equate {
  param.resolve(this);
  [this]ThisFieldEquate;
}

dot.equate {
  // object = v0.getObject;
  v0.getObject;
  // this = getField(object, v1);
  getField;
  param.resolve(this);
  [this]FieldEquate;
}

// increment

increment {
  v0.increment;
}

variable.increment {
  [this]VarIncrement;
}

field.increment {
  [this]FieldIncrement;
}

dot.increment {
  // object = v0.getObject;
  v0.getObject;
  // this = getField(object, v1);
  getField;
  [this]FieldIncrement;
}

// resolution

variable.resolve {
  [this]VarPush;
  convert(this, param);
}

dot.resolve {
  // object = v0.getObject;
  v0.getObject;
  // this = getField(object, v1);
  getField;
  this.resolve(param);
}

field.resolve {
  [this]ThisFieldPush;
  convert(this, param);
}

function.resolve {
  call;
  convert(this, param);
}

const.resolve {
  [param]Push;
}

addition.resolve {
	v0.resolve(param);
	v1.resolve(param);
  [param]Add;
}

subtraction.resolve {
	v0.resolve(Int);
	v1.resolve(Int);
  [Int]Subtract;
  convert(Int, param);
}

multiplication.resolve {
	v0.resolve(Int);
	v1.resolve(Int);
  [Int]Multiply;
  convert(Int, param);
}

mod.resolve {
	v0.resolve(Int);
	v1.resolve(Int);
  [Int]Mod;
  convert(Int, param);
}

equal.resolve {
  v0.resolve(Int);
  v1.resolve(Int);
  [Int]IsEqual;
  convert(Bool, param);
}

less.resolve {
  v0.resolve(Int);
  v1.resolve(Int);
  [Int]IsLess;
  convert(Bool, param);
}

lessOrEqual.resolve {
  v0.resolve(Int);
  v1.resolve(Int);
  [Int]IsLessOrEqual;
  convert(Bool, param);
}

more.resolve {
  v0.resolve(Int);
  v1.resolve(Int);
  [Int]IsMore;
  convert(Bool, param);
}

// blocks

if {
  $condition.resolve(Bool);
  IfFalseGoTo(#endIf);
  process($code);
  #endIf:
}

if_else {
  $condition.resolve(Bool);
  IfFalseGoTo(#else);
  process($code);
  GoTo(#endIf);
  #else:
  process($else);
  #endIf:
}

do {
  #start:
  process($code);
  GoTo(#start);
  #end:
}

for_to {
  process($variable);
  $variable.equate($from);
  #start:
  $variable.resolve(Int);
  $to.resolve($variable);
  [Int]IsLessOrEqual;
  IfFalseGoTo(#end);
  process($code);
  $variable.increment;
  GoTo(#start);
  #end:
}

for_until {
  process($variable);
  $variable.equate($from);
  #start:
  $variable.resolve(Int);
  $until.resolve($variable);
  [Int]IsLess;
  IfFalseGoTo(#end);
  process($code);
  $variable.increment;
  GoTo(#start);
  #end:
}

for_collection {
  process($item);
  $collection.resolve(Object);
  ListToIterator;
  ObjectVarEquate(@iterator);
  #start:
  @iterator.resolve(Object);
  IteratorHasNext;
  IfFalseGoTo(#end);
  @iterator.resolve(Object);
  [$item]IteratorNext;
  [$item]VarEquate($item);
  process($code);
  GoTo(#start);
  #end:
}

break {
  GoTo(#end);
}