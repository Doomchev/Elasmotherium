variable {
  value.resolve(this);
  switch(this) {
    case Int:
      I64VarEquate;
  }
}

return {
  v0.resolve(function);
  switch(function) {
    case Int:
      I64Return;
  }
}

if {
  condition.resolve(Bool);
  IfFalseGoTo(#else);
  process(code);
  GoTo(#end);
  #else:
  process(else);
  #end:
}

do {
  #start:
  process(code);
  GoTo(#start);
}

link.resolve {
  getFromScope;
  this.resolve(parent);
  return(this);
}

variable.resolve {
  switch(this) {
    case Int:
      I64VarPush;
    case String:
      StringVarPush;
  }
  return(this);
}

const.resolve {
  switch(parent) {
    case Int:
      I64Push;
    case String:
      StringPush;
  }
  return(parent);
}

addition.resolve {
	v0.resolve(parent);
	v1.resolve(parent);
  switch(parent) {
    case Int:
      I64Add;
    case String:
      StringAdd;
  }
  return(parent);
}

subtraction.resolve {
	v0.resolve(Int);
	v1.resolve(Int);
  I64Subtract;
  return(Int);
}

multiplication.resolve {
	v0.resolve(Int);
	v1.resolve(Int);
  I64Multiply;
  return(Int);
}

equal.resolve {
  v0.resolve();
  v1.resolve();
  I64IsEqual;
  return(Bool);
}

less.resolve {
  v0.resolve(Int);
  v1.resolve(Int);
  I64IsLess;
  return(Bool);
}

lessOrEqual.resolve {
  v0.resolve(Int);
  v1.resolve(Int);
  I64IsLessOrEqual;
  return(Bool);
}

more.resolve {
  v0.resolve(Int);
  v1.resolve(Int);
  I64IsMore;
  return(Bool);
}